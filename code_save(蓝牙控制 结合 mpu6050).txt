#include "driverlib.h"
#include "mpu6050/Mpu-6050.h"
#include "clk.h"
#include"PWM_ACLK.h"
#define LED BIT0 // LED连接到P1.0
#define RXD BIT3 // RXD连接到P4.4
#define TXD BIT4 // TXD连接到P4.5
int bn;
void UART_init(void)
{
    P3SEL |= RXD + TXD; // 配置P4.4和P4.5为UART模式

    UCA0CTL1 |= UCSSEL_2; // 使用SMCLK作为UART时钟
    UCA0BR0 = 52; // 设置波特率为9600（SMCLK=1MHz时）
    UCA0BR1 = 0;
    UCA0MCTL = UCBRS_1 + UCBRF_0 + UCOS16; // UCBRSx值为0x00

    UCA0CTL1 &= ~UCSWRST; // 初始化UART
    UCA0IE |= UCRXIE; // 启用UART接收中断
}

//#define duty_points 1000
int main(void)
{
    float a;
    float b;
    //float c;
    int dutycyclex;
    int dutycycley;
  WDT_A_hold(WDT_A_BASE);
  InitMPU6050();
  clk_Init ();
  set_PWM(655);//使用ACLK32768hz，20ms

  P1DIR |= LED; // 配置LED引脚为输出

  UART_init(); // 初始化UART

  __bis_SR_register(GIE); // 进入低功耗模式，启用全局中断

  while(1)
  {
      if(bn==1) setPWM_duty_cycle(15,60);
      if(bn==0) setPWM_duty_cycle(15,34);
      a=Mpu6050AccelAngle(ACCEL_XOUT);
      b=Mpu6050AccelAngle(ACCEL_YOUT);
      //c=Mpu6050AccelAngle(ACCEL_ZOUT);
      if(a<0)
      {
          dutycyclex = 51+abs((int)a*0.375);
      }
      else if(a>0)
      {
          dutycyclex = 51-abs((int)a*0.375);
      }

      if(b<0)
      {
          dutycycley = 51+abs((int)b*0.375);
      }
      else if(b>0)
      {
          dutycycley = 51-abs((int)b*0.375);
      }

      if (dutycyclex < 17)
      {
          dutycyclex = 17; // 如果结果小于500，将其修正为500
      } else if (dutycyclex > 85)
      {
          dutycyclex = 85; // 如果结果大于2500，将其修正为2500
      }


      if (dutycycley < 17)
      {
          dutycycley = 17; // 如果结果小于500，将其修正为500
      } else if (dutycycley > 85)
      {
          dutycycley = 85; // 如果结果大于2500，将其修正为2500
      }
      setPWM_duty_cycle(20,34);setPWM_duty_cycle(13,dutycyclex);//前左脚
      setPWM_duty_cycle(24,34);setPWM_duty_cycle(14,dutycyclex);//后左脚
      setPWM_duty_cycle(20,34);setPWM_duty_cycle(12,dutycyclex);//前右脚
      //setPWM_duty_cycle(35,34);setPWM_duty_cycle(15,dutycyclex);//后右脚

  }
}
#pragma vector=USCI_A0_VECTOR
__interrupt void USCI_A0_ISR(void)
{
    switch(__even_in_range(UCA0IV, USCI_A0_VECTOR))
    {
        case USCI_NONE: break;
        case USCI_UCRXIFG: // UART接收中断
            if (UCA0RXBUF == '1') // 如果收到'1'
            {
                P1OUT |= LED; // 点亮LED
                bn=1;
            }
            else if (UCA0RXBUF == '0') // 如果收到'0'
            {
                P1OUT &= ~LED; // 熄灭LED
                bn=0;
            }
            break;
        default: break;
    }
}
